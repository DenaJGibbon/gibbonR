library(DiagrammeR)
grViz("digraph flowchart {
# node definitions with substituted label text
graph [layout = dot]
node [fontname = Helvetica, shape = rectangle]
tab1 [label = '@@1']
tab2 [label = '@@2']
tab3 [label = '@@3']
tab4 [label = '@@4']
tab5 [label = '@@5']
tab6 [label = '@@6']
tab7 [label = '@@7']
tab8 [label = '@@8']
tab9 [label = '@@9']
tab10 [label = '@@10']
tab11 [label = '@@11']
tab12 [label = '@@12']
# edge definitions with the node IDs
tab1 -> tab2 -> tab3;
tab3 -> {tab4 tab5 tab6}
tab6 -> tab7
tab6 -> tab8
tab4 -> tab9
tab5 -> tab9
tab7 -> tab9
tab8 -> tab9
tab9 ->tab10
tab9 ->tab11
tab10 -> tab12
tab11 -> tab12
{rank = same; tab4; tab5; tab6}
}
[1]: '1. Create labelled training dataset'
[2]:  paste0('2. Extract features','\\n ','[MFCCfunction]')
[3]: '3. Identify sound events in long-term recording'
[4]: paste0('3a. Detect with band-limited energy detector','\\n ','[DetectBLED]')
[5]: paste0('3b. Detect with support-vector machine','\\n ','[DetectSVM]')
[6]: paste0('3c. Detect and classify sound events', '\\n ','[DetectAndClassify] ')
[7]: paste0('4a. Use random forest algorithm',':\\n ','[model.type= RF]')
[8]: paste0('4b. Use support vector machine algorithm','\\n ','[model.type= SVM]')
[9]: '5. Validate output using a human observer'
[10]: paste0('5a. Validate using gibbonR package','\\n ','[ValidateML]')
[11]: paste0('5b. Validate using external software','\\n ','(e.g. Raven Pro)')
[12]: paste0('6. Calculate performance metrics','\\n ','[PerformanceML]')
")
graph <- grViz("digraph flowchart {
# node definitions with substituted label text
graph [layout = dot]
node [fontname = Helvetica, shape = rectangle]
tab1 [label = '@@1']
tab2 [label = '@@2']
tab3 [label = '@@3']
tab4 [label = '@@4']
tab5 [label = '@@5']
tab6 [label = '@@6']
tab7 [label = '@@7']
tab8 [label = '@@8']
tab9 [label = '@@9']
tab10 [label = '@@10']
tab11 [label = '@@11']
tab12 [label = '@@12']
# edge definitions with the node IDs
tab1 -> tab2 -> tab3;
tab3 -> {tab4 tab5 tab6}
tab6 -> tab7
tab6 -> tab8
tab4 -> tab9
tab5 -> tab9
tab7 -> tab9
tab8 -> tab9
tab9 ->tab10
tab9 ->tab11
tab10 -> tab12
tab11 -> tab12
{rank = same; tab4; tab5; tab6}
}
[1]: '1. Create labelled training dataset'
[2]:  paste0('2. Extract features','\\n ','[MFCCfunction]')
[3]: '3. Identify sound events in long-term recording'
[4]: paste0('3a. Detect with band-limited energy detector','\\n ','[DetectBLED]')
[5]: paste0('3b. Detect with support-vector machine','\\n ','[DetectSVM]')
[6]: paste0('3c. Detect and classify sound events', '\\n ','[DetectAndClassify] ')
[7]: paste0('4a. Use random forest algorithm',':\\n ','[model.type= RF]')
[8]: paste0('4b. Use support vector machine algorithm','\\n ','[model.type= SVM]')
[9]: '5. Validate output using a human observer'
[10]: paste0('5a. Validate using gibbonR package','\\n ','[ValidateML]')
[11]: paste0('5b. Validate using external software','\\n ','(e.g. Raven Pro)')
[12]: paste0('6. Calculate performance metrics','\\n ','[PerformanceML]')
")
grViz(graph) %>%
export_svg %>% charToRaw %>% rsvg_pdf("graph.pdf")
install.packages('DiagrammeRsvg')
library(DiagrammeR)
library(DiagrammeRsvg)
library(magrittr)
library(rsvg)
install.packages('rsvg')
library(rsvg)
grViz(graph) %>%
export_svg %>% charToRaw %>% rsvg_pdf("graph.pdf")
graph
graph %>%
export_svg() %>%
read_xml() %>%
write_xml("graph.svg")
library(xml2)
graph %>%
export_svg() %>%
read_xml() %>%
write_xml("graph.svg")
grViz(graph) %>%
export_svg %>% charToRaw %>% rsvg_png("graph.png")
dsaf
# Load required libraries
library(devtools)
library(ggpubr)
set.seed(13)
# To load and test package
load_all()
devtools::document()
# To load and test package
load_all()
# To load and test package
load_all()
devtools::document()
devtools::document()
# To load and test package
load_all()
devtools::document()
# To load and test package
load_all()
gibbonR::DetectAndClassify()
# Load required libraries
library(devtools)
library(ggpubr)
set.seed(13)
devtools::document()
devtools::document()
# To load and test package
load_all()
# Load required libraries
library(devtools)
library(ggpubr)
set.seed(13)
devtools::document()
# To load and test package
load_all()
install.packages('gstat')
usethis::use_vignette("my-vignette")
# Load required libraries
library(devtools)
library(ggpubr)
set.seed(13)
devtools::document()
# To load and test package
load_all()
library(devtools)
install_github("DenaJGibbon/gibbonR")
remove.packages("gibbonR")
library(gibbonR)
library(gibbonR)
?extractWave
# Load required libraries
library(devtools)
library(ggpubr)
# Load required libraries
library(devtools)
library(ggpubr)
library(devtools)
install_github("DenaJGibbon/gibbonR")
library(gibbonR)
remove.packages('gibbonR')
60000/24
2500/24
