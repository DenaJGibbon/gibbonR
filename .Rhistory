random.sample=FALSE)
}
devtools::document()
# To load and test package
devtools::load_all()
devtools::document()
# To load and test package
devtools::load_all()
remove.packages('gibbonR')
devtools::document()
# To load and test package
devtools::load_all()
install_github("DenaJGibbon/gibbonR")
# Load required libraries
# Add documentation opt+cmd+shfit+r
library(devtools)
library(ggpubr)
library(rmarkdown)
library(devtools)
install_github("DenaJGibbon/gibbonR")
install_github("DenaJGibbon/gibbonR")
devtools::document()
devtools::document()
# To load and test package
devtools::load_all()
install_github("DenaJGibbon/gibbonR")
devtools::document()
# To load and test package
devtools::load_all()
library(devtools)
install_github("DenaJGibbon/gibbonR")
devtools::check()
.Last.error
devtools::document()
# To load and test package
devtools::load_all()
gibbonR()
devtools::document()
# To load and test package
devtools::load_all()
remove.packages('gibbonR')
library(devtools)
install_github("DenaJGibbon/gibbonR")
devtools::check()
.Last.error
# Load required libraries
# Add documentation opt+cmd+shfit+r
library(devtools)
library(ggpubr)
library(rmarkdown)
library(devtools)
install_github("DenaJGibbon/gibbonR")
devtools::document()
# To load and test package
devtools::load_all()
gibbonR::DetectBLED
gibbonR::gibbonID
# Load required libraries
# Add documentation opt+cmd+shfit+r
library(devtools)
devtools::document()
# To load and test package
devtools::load_all()
devtools::check()
devtools::document()
# To load and test package
devtools::load_all()
devtools::check()
devtools::document()
# To load and test package
devtools::load_all()
devtools::check()
install_github("DenaJGibbon/gibbonR")
file.choose()
short.wav <- "/Users/denaclink/Desktop/RStudio Projects/gibbonR/data/MultipleSoundClasses/solo.gibbon_20.wav"
mfcc.vector <- MFCCFunction(input.dir=short.wav)
devtools::document()
devtools::document()
# To load and test package
devtools::load_all()
remove.packages('gibbonR')
install_github("DenaJGibbon/gibbonR")
install_github("DenaJGibbon/gibbonR")
devtools::document()
# To load and test package
devtools::load_all()
devtools::check()
install_github("DenaJGibbon/gibbonR")
TrainingDataFolderLocation <- "/Users/denaclink/Desktop/RStudio Projects/gibbonR/data/TrainingDataFromRavenSelectionTables/"
TrainingDataMFCC <- MFCCFunction(input.dir= TrainingDataFolderLocation, min.freq = 400, max.freq = 1600,win.avg="standard")
TrainingDataMFCC$class <- as.factor(TrainingDataMFCC$class)
TestFileDirectory <- '/Users/denaclink/Library/CloudStorage/Box-Box/gibbonRSampleFiles/GibbonTestFiles'
OutputDirectory <-  "/Users/denaclink/Desktop/RStudio Projects/gibbonR/data/DetectAndClassifyOutput"
gibbonR(input=TestFileDirectory,
feature.df=TrainingDataMFCC,
model.type.list=c('SVM','RF'),
tune = TRUE,
short.wav.duration=300,
target.signal = c("female.gibbon","solo.gibbon"),
min.freq = 400, max.freq = 1600,
noise.quantile.val=0.15,
minimum.separation =3,
n.windows = 9, num.cep = 12,
spectrogram.window =160,
pattern.split = ".wav",
min.signal.dur = 3,
max.sound.event.dur = 25,
maximum.separation =1,
probability.thresh.svm = 0.15,
probability.thresh.rf = 0.15,
wav.output = "TRUE",
output.dir =OutputDirectory,
swift.time=TRUE,time.start=5,time.stop=10,
write.table.output=FALSE,verbose=TRUE,
random.sample='NA')
unique(TrainingDataMFCC$class)
file.choose()
TrainingDataFolderLocation <- "/Users/denaclink/Desktop/RStudio Projects/gibbonR/data/MultipleSoundClasses/"
TrainingDataMFCC <- MFCCFunction(input.dir= TrainingDataFolderLocation, min.freq = 400, max.freq = 1600,win.avg="standard")
TrainingDataMFCC$class <- as.factor(TrainingDataMFCC$class)
TestFileDirectory <- '/Users/denaclink/Library/CloudStorage/Box-Box/gibbonRSampleFiles/GibbonTestFiles'
OutputDirectory <-  "/Users/denaclink/Desktop/RStudio Projects/gibbonR/data/DetectAndClassifyOutput"
gibbonR(input=TestFileDirectory,
feature.df=TrainingDataMFCC,
model.type.list=c('SVM','RF'),
tune = TRUE,
short.wav.duration=300,
target.signal = c("female.gibbon","solo.gibbon"),
min.freq = 400, max.freq = 1600,
noise.quantile.val=0.15,
minimum.separation =3,
n.windows = 9, num.cep = 12,
spectrogram.window =160,
pattern.split = ".wav",
min.signal.dur = 3,
max.sound.event.dur = 25,
maximum.separation =1,
probability.thresh.svm = 0.15,
probability.thresh.rf = 0.15,
wav.output = "TRUE",
output.dir =OutputDirectory,
swift.time=TRUE,time.start=5,time.stop=10,
write.table.output=FALSE,verbose=TRUE,
random.sample='NA')
library(utils)
# You need to tell R where to store the zip files on your computer.
destination.file.path.zip <-
"data/BorneoExampleData.zip"
# You also need to tell R where to save the unzipped files
destination.file.path <- "data/BorneoExampleData"
# This function will download the data from github
utils::download.file("https://github.com/DenaJGibbon/BorneoExampleData/archive/master.zip",
destfile = destination.file.path.zip)
# This function will unzip the file
utils::unzip(zipfile = destination.file.path.zip,
exdir = destination.file.path)
# Examine the contents
list.of.sound.files <- list.files(paste(destination.file.path,
"BorneoExampleData-master", "data", sep =
"/"),
full.names = T)
list.of.sound.files
loadRData <- function(fileName) {
#loads an RData file, and returns it
load(fileName)
get(ls()[ls() != "fileName"])
}
list.of.sound.files <- list.files(paste("/Users/denasmacbook/Desktop/BorneoExampleData/data", sep =
"/"),
full.names = T)
list.of.sound.files
list.of.sound.files <- list.files(paste("/Users/denasmacbook/Desktop/BorneoExampleData/data", sep =
"/"),
full.names = T)
list.rda.files <- list()
for(x in 1:length(list.of.sound.files)){
list.rda.files[[x]] <-  loadRData(list.of.sound.files[[x]])
}
list.of.sound.files <- list.files(destination.file.path,
full.names = T)
list.of.sound.files
list.of.sound.files <- list.files(destination.file.path,
full.names = T,recursive = T)
list.rda.files <- list()
for(x in 1:length(list.of.sound.files)){
list.rda.files[[x]] <-  loadRData(list.of.sound.files[[x]])
}
list.of.sound.files[[x]]
list.of.sound.files <- list.files(destination.file.path,
full.names = T,recursive = T, pattern = '.rda)
list.of.sound.files <- list.files(destination.file.path,
full.names = T,recursive = T, pattern = '.rda')
list.of.sound.files <- list.files(destination.file.path,
full.names = T,recursive = T, pattern = '.rda')
list.rda.files <- list()
for(x in 1:length(list.of.sound.files)){
list.rda.files[[x]] <-  loadRData(list.of.sound.files[[x]])
}
gibbon.females <- list.rda.files[[1]]
multi.class.list <- list.rda.files[[2]]
listBorneoSounds <- list()
for (x in 1:5){
listBorneoSounds[x] <- list.rda.files[[x+2]]
}
training.MFCC.long <- list.rda.files[[8]]
gibbon.females <- list.rda.files[[1]]
multi.class.list <- list.rda.files[[2]]
listBorneoSounds <- list()
for (x in 1:5){
listBorneoSounds[[x]] <- list.rda.files[[x+2]]
}
training.MFCC.long <- list.rda.files[[8]]
listBorneoSounds
load("~/Desktop/RStudio Projects/gibbonR/data/BorneoExampleData/BorneoExampleData-master/data/S11_20180219_060002_1800sto3600s.rda")
View(S11_20180219_060002_1800sto3600s)
typeof()
typeof(S11_20180219_060002_1800sto3600s)
list.file.input <- file.choose()
list.file.input
i=1
typeof(list.file.input[i] )
input < - S11_20180219_060002_1800sto3600s
input <- S11_20180219_060002_1800sto3600s
file.exists(input)
file.exists(input)
input
?warbleR
??warbleR
# This function will download the data from github
utils::download.file("https://github.com/DenaJGibbon/BorneoExampleData/blob/master/data/S11_20180219_060002_1800sto3600s.rda",
destfile = 'data')
utils::download.file("https://github.com/DenaJGibbon/BorneoExampleData/blob/master/data/S11_20180219_060002_1800sto3600s.rda",
destfile = 'data/S11_20180219_060002_1800sto3600s.rda')
load('data/S11_20180219_060002_1800sto3600s.rda')
load(file='data/S11_20180219_060002_1800sto3600s.rda')
load("~/Desktop/RStudio Projects/gibbonR/data/S11_20180219_060002_1800sto3600s.rda")
load("~/Desktop/RStudio Projects/gibbonR/data/BorneoExampleData/BorneoExampleData-master/data/S11_20180219_060002_1800sto3600s.rda")
writeWave(S11_20180219_060002_1800sto3600s,'S11_20180219_060002_1800sto3600s.wav',extensible = F)
writeWave(S11_20180219_060002_1800sto3600s,'data/S11_20180219_060002_1800sto3600s.wav',extensible = F)
S11_20180219_060002_1800sto3600s <- readWave('S11_20180219_060002_1800sto3600s.wav')
S11_20180219_060002_1800sto3600s <- readWave('data/S11_20180219_060002_1800sto3600s.wav')
save(S11_20180219_060002_1800sto3600s,file='S11_20180219_060002_1800sto3600s.rda')
load(file='data/S11_20180219_060002_1800sto3600s.rda')
writeWave(S11_20180219_060002_1800sto3600s,'data/S11_20180219_060002_1800sto3600s.wav',extensible = F)
S11_20180219_060002_1800sto3600s
writeWave(S11_20180219_060002_1800sto3600s,'data/S11_20180219_060002_1800sto3600s.wav',extensible = F)
file.choose()
file.choose()
# You need to tell R where to store the zip files on your computer.
destination.file.path.zip <-
"/Users/denaclink/Downloads/BorneoExampleData.zip"
# You also need to tell R where to save the unzipped files
destination.file.path <- "/Users/denaclink/Desktop/RStudio Projects/gibbonR/data/"
# This function will download the data from github
utils::download.file("https://github.com/DenaJGibbon/BorneoExampleData/archive/master.zip",
destfile = destination.file.path.zip)
# This function will unzip the file
utils::unzip(zipfile = destination.file.path.zip,
exdir = destination.file.path)
# Examine the contents
list.of.sound.files <- list.files(paste(destination.file.path,
"BorneoExampleData-master", "data", sep =
"/"),
full.names = T)
list.of.sound.files
loadRData <- function(fileName) {
#loads an RData file, and returns it
load(fileName)
get(ls()[ls() != "fileName"])
}
list.of.sound.files <- list.files(paste(destination.file.path, sep =
"/"),
full.names = T)
list.rda.files <- list()
for(x in 1:length(list.of.sound.files)){
list.rda.files[[x]] <-  loadRData(list.of.sound.files[[x]])
}
list.of.sound.files
destination.file.path
list.of.sound.files <- list.files(paste(destination.file.path, sep =
"/"),
full.names = T)
list.rda.files <- list()
for(x in 1:length(list.of.sound.files)){
list.rda.files[[x]] <-  loadRData(list.of.sound.files[[x]])
}
list.of.sound.files
list.of.sound.files
destination.file.path
(paste(destination.file.path,
"BorneoExampleData-master", "data", sep =
"/")
)
list.of.sound.files <- list.files(paste(destination.file.path,
"BorneoExampleData-master", "data", sep =
"/"),
full.names = T)
list.of.sound.files
list.rda.files <- list()
for(x in 1:length(list.of.sound.files)){
list.rda.files[[x]] <-  loadRData(list.of.sound.files[[x]])
}
list.rda.files[[2]]
list.rda.files[[1]]
list.rda.files[[2]]
list.rda.files[[2]]
a=1
multi.class.list[[a]]
multi.class.list <- list.rda.files[[1]]
multi.class.list[[a]]
destination.file.path
library(gibbonR)
Temp.element[[1]]
Temp.element <- multi.class.list[[a]]
Temp.element[[1]]
TrainingDataDirectory <- "/Users/denaclink/Desktop/RStudio Projects/gibbonR/data/BorneoMultiClass"
for(a in 1:length(multi.class.list)){
Temp.element <- multi.class.list[[a]]
writeWave(Temp.element[[2,]], paste(TrainingDataDirectory,Temp.element[[1]],sep='/'))
}
TrainingDataDirectory <- "/Users/denaclink/Desktop/RStudio Projects/gibbonR/data/BorneoMultiClass"
for(a in 1:length(multi.class.list)){
Temp.element <- multi.class.list[[a]]
writeWave(Temp.element[[2]], paste(TrainingDataDirectory,Temp.element[[1]],sep='/'))
}
?warbleR::auto_detec
devtools::document()
# To load and test package
devtools::load_all()
?gibbonR::gibbonR
file.choose()
file.choose()
# Load necessary packages -------------------------------------------------
library(stringr)
library(plyr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lme4)
library(bbmle)
library(flextable)
library(e1071)
library(umap)
library(cowplot)
library(bayesplot)
library(rstan)
library(car)
rstan_options(auto_write=TRUE)
options(mc.cores = parallel::detectCores())
library(spdep)
#Load Data set--------------
all.dataset<- read.csv2("/Users/denaclink/Downloads/Data Tesis/dataset.new.csv")
View(all.dataset)
female.gps<- read.csv2("/Users/denaclink/Downloads/Data Tesis/data gps.csv")
min.max <- data.frame(mean=sapply(all.dataset[,c(3:35)], mean),
sd=sapply(all.dataset[,c(3:35)],sd),
min=sapply(all.dataset[,c(3:35)],min),
max=sapply(all.dataset[,c(3:35)],max))
View(min.max)
min.max$se <- min.max$sd / sqrt(nrow(min.max))
min.max <- round(cbind.data.frame(min.max),2)
min.max$mean <- paste(min.max$mean)
min.max$sd <- paste(min.max$sd)
min.max$min <- paste(min.max$min)
min.max$max <- paste(min.max$max)
min.max$mean.se <- paste(min.max$mean, '±', min.max$se)
min.max$range <- paste(min.max$min, '-', min.max$max,sep='')
NewMinMax <- min.max[,c('mean','sd','min','max')] # paste(min.max$mean.se , '\n', min.max$range )
Feature <- c('Durasi great call (s)',
'Durasi terminasi (s)',
'Durasi great call tanpa terminasi (s)',
'Note great call',
'Note terminasi',
'Frekuensi minimum (Hz)',
'Frekuensi maksimum (Hz)',
'Bandwidth (Hz)',
'Durasi introduction note (s)',
'Frekuensi minimum introduction note (Hz)',
'Frekuensi maksimum introduction note (Hz)',
'Bandwidth introduction note (Hz)',
'Note pre-trill',
'Durasi pre-trill (s)',
'Durasi note 1  (s)',
'Frekuensi minimum note 1 (Hz)',
'Frekuensi maksimum note 1 (Hz)',
'Bandwidth note 1(Hz)',
'Note trill',
'Durasi trill (s)',
'Durasi trill note 1 (s)',
'Frekuensi minimum trill note 1 (Hz)',
'Frekuensi maksimum note 1 (Hz)',
'Bandwidth trill note 1(Hz)',
'Durasi trill note 2 (s)',
'Frekuensi minimum trill note 2 (Hz)',
'Frekuensi maksimum trill note 2 (Hz)',
'Bandwidth trill note 2 (Hz)',
'Frekuensi minimum note akhir trill (Hz)',
'Bandwidth minimal trill (Hz)',
'Durasi masksimal trill (s)',
'Frekuensi maksimal terminasi (Hz)',
'Bandwidth terminasi (Hz)')
table.with.features <- cbind.data.frame(Feature,NewMinMax)
colnames(table.with.features) <- c('Variabel','Mean', 'Sd','Min','Mak')
myft <- flextable(
(table.with.features))
myft <- width(myft, width = 1)
myft <- bold(myft, part = "header")
myft
## Part 2a. Supervised classification
# Convert all grouping variables to factor for SVM
all.dataset$Site <- as.factor(all.dataset$Site)
all.dataset$Individu <- as.factor(all.dataset$Individu)
# Supervised clustering using spectrogram features by site
ml.model.specfeatures.svm.site <- e1071::svm(all.dataset[,c(3:35)],
all.dataset$Site, kernel = "radial",
cross = 25)
ml.model.specfeatures.svm.site$tot.accuracy # LOOCV: 81.23457
unique(all.dataset$Site )
unique(all.dataset$Individu)
nrow(all.dataset)
table(all.dataset$Individu)
1/6
# Supervised clustering using spectrogram features by individual
ml.model.specfeatures.svm <- e1071::svm(all.dataset[,c(3:35)],
all.dataset$Individu, kernel = "radial",
cross = 25)
ml.model.specfeatures.svm$tot.accuracy # LOOCV: 77.28395
## Part 2b. Using UMAP to visualize differences in individual
female.individual.umap <-
umap::umap(all.dataset[,c(3:35)],labels=as.factor(all.dataset$Individu),
controlscale=TRUE,scale=3)
plot.for.female.individuals <-
cbind.data.frame(female.individual.umap$layout[,1:2],
all.dataset$Individu)
colnames(plot.for.female.individuals) <-
c("Dim.1", "Dim.2", "Individu")
Female.individu <- ggplot(plot.for.female.individuals, aes(x = Dim.1,
y = Dim.2, col = Individu)) +
geom_point(size = 3) +
scale_color_manual(labels=c("A", "B", "C", "D",
"E", "F", "G", "H","I","J","K","L",
"M", "N"),
values = matlab::jet.colors (length(unique(plot.for.female.individuals$Individu))))+labs(color='Individu')+
ggtitle('A') +theme_bw()
Female.individu
female.site.umap <-
umap::umap(all.dataset[,c(3:35)],labels=as.factor(all.dataset$Site),
controlscale=TRUE,scale=3)
plot.for.female.site <-
cbind.data.frame(female.site.umap$layout[,1:2],
all.dataset$Site)
colnames(plot.for.female.site) <-
c("Dim.1", "Dim.2", "Site")
Female.site <- ggplot(plot.for.female.site, aes(x = Dim.1,
y = Dim.2, col = Site)) +
geom_point(size = 3) +
scale_color_manual(labels=c("Tombo (TM)", "Salakan (SL)", "Sawangan ronggo (SR)",
"Mendolo (MN)", "Kalipaingan (KP)","Linggo asri (LA)"),
values = matlab::jet.colors (length(unique(plot.for.female.site$Site))))+labs(color='Site')+
ggtitle('B') +theme_bw()
Female.site
ml.model.specfeatures.svm$accuracies
# Supervised clustering using spectrogram features by individual
ml.model.specfeatures.svm <- e1071::svm(all.dataset[,c(3:35)],
all.dataset$Individu, kernel = "radial",
cross = nrow(all.dataset))
ml.model.specfeatures.svm$accuracies
ml.model.specfeatures.svm$tot.accuracy # LOOCV: 77.28395
# Supervised clustering using spectrogram features by site
ml.model.specfeatures.svm.site <- e1071::svm(all.dataset[,c(3:35)],
all.dataset$Site, kernel = "radial",
cross = nrow(all.dataset))
ml.model.specfeatures.svm.site$tot.accuracy # LOOCV: 81.23457; random chance would be 1/6 or ~%16
d.manova <- all.dataset[,c("Durasi_greatcall","Durasi_termisi",
"Frekuensi_min",
"Frekuensi_max","Durasi_introduction_note",
"Bandwith_introduction_note",
"Note_trill","Durasi_trill_note_1.1",
"Frek_min_note_akhir_trill",
"Bandwith_min_trill","Frek_mak_termisi")]
# Check the structure of the data
cor(d.manova)
# Log transform data
d.manova <- log(d.manova)
# Create pairs plot for inspection of data
pairs(d.manova)
## Check the structure of the data
str(d.manova)
# Set-up data to pass to Stan.
# Integer-coded vector of group IDs
group.int <- as.numeric(all.dataset$Individu)
# Check structure
table(group.int)
# Integer-coded vector of site IDs
site.int <- as.numeric(as.factor(all.dataset$Site))
# Check structure
table(site.int)
# Center data matrix at feature means
col.means <- apply(d.manova, MARGIN=2, FUN="mean")
y.centered <- sweep(d.manova, MARGIN=2, STATS=col.means)
# Create a data list to pass to Stan
data_list <- list(
K = dim(d.manova)[2],
J= length(unique(all.dataset$Individu)),
M= length(unique(all.dataset$Site)),
N= dim(d.manova)[1],
y= as.matrix(y.centered), ## features centered at zero
group= group.int,
site= site.int
)
Sys.info()['sysname']
.Platform$OS.type
